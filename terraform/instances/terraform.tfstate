{
  "version": 4,
  "terraform_version": "1.0.10",
  "serial": 781,
  "lineage": "758a11f3-8cb2-2eb1-144d-47e569f2c313",
  "outputs": {
    "public_ip": {
      "value": "3.68.192.198",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:eu-central-1::image/ami-0a49b025fffbbdac6",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-012094c3b417230a2",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "creation_date": "2021-10-22T00:40:45.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2021-10-21",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-*20*-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0a49b025fffbbdac6",
            "image_id": "ami-0a49b025fffbbdac6",
            "image_location": "099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20211021",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20211021",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-012094c3b417230a2",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "config",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "4248840277",
            "part": [
              {
                "content": "#cloud-config\n# Add groups to the system\n# Adds the ubuntu group with members 'root' and 'sys'\n# and the empty group hashicorp.\ngroups:\n  - ubuntu: [root,sys]\n  - hashicorp\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: apetrisor\n    gecos: Adrian Petrisor\n    shell: /bin/bash\n    primary_group: hashicorp\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    lock_passwd: false\n    ssh_authorized_keys:\n      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj6LzR5uRvDziZwvZRsBJGwUBbddskx5Irpp/EbgXHmrV2EfB9QErEs9cswBbWnZ6UDkHrwp8nxtNiFR8GOADgXyJSlgJavvXf7s4V+S8lWxC2IOMlxSDpI7Pj76Wa26V4r+n3Zfl7Ub5NocDZ5TLKT+9XKoaDYr6mO+q/ixRJclqJxCVQVp+G2J3CDAEHiHYfUE8mxc68+KsoAT/5bRNGMd/iVHeeYAeELDtuv8nx+8YOLNTAQ5wQc72wuiA9b6CRWom/az4vY09hL9QgE9hh3EGWDjyeW8Q6HskbZfKUaQTlsTnW/XtNdvp3GFzTf6Yu7lVe1ynWiU2VECX91SsH\n\npackages:\n#  - golang-go\n",
                "content_type": "text/cloud-config",
                "filename": "add-ssh.yaml",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\n#  https://brad-simonin.medium.com/learning-how-to-execute-a-bash-script-from-terraform-for-aws-b7fe513b6406\n\necho 'Preparing workspace...'\nmkdir Workspace \u0026\u0026 cd Workspace\nexport HOME=/root\n\n# Pulls repository with my Erlang server.\necho 'Pulling repo...'\n# TODO: Do not hardcode repo URL\ngit clone https://github.com/apetrisor1/erlangseatsserver.git\napt-get -y update\n\n# Pulls Erlang binaries and installs.\n# TODO: Do not hardcode Erlang URL\necho 'Pulling Erlang and installing...'\ncurl https://packages.erlang-solutions.com/erlang/debian/pool/esl-erlang_23.3.4.5-1~ubuntu~focal_amd64.deb \u003e erlanginstaller\ndpkg -i /Workspace/erlanginstaller\napt-get install -y -f\nrm /Workspace/erlanginstaller\n\n#  Fixes some missing packages, required by esl-erlang.\necho 'Fixing broken packages...'\nyes | apt --fix-broken install\n\n#  Install Docker Engine\necho 'Installing Docker Engine...'\napt-get install -y ca-certificates curl gnupg lsb-release\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\napt-get -y update\napt-get install -y docker-ce docker-ce-cli containerd.io\n\n#  Install Docker Compose\necho 'Installing Docker Compose...'\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\n#  Install ODBC Driver\necho 'Installing ODBC Driver...'\napt-get install -y odbc-postgresql\napt-get install -y unixodbc-dev\n\n#  Install Rebar3\necho 'Installing Rebar3...'\nwget https://s3.amazonaws.com/rebar3/rebar3 \u0026\u0026 chmod +x rebar3\napt-get install -y build-essential\n\n/Workspace/rebar3 update\n/Workspace/rebar3 upgrade\n/Workspace/rebar3 clean\n\n#  Configure ODBC settings (for DB connection).\necho 'Configuring ODBC files...'\nrm /etc/odbcinst.ini\n\n# TODO: Would probably be better to store these in my repo\necho '[PostgreSQL ANSI]\nDescription=PostgreSQL ODBC driver (ANSI version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n\n[PostgreSQL Unicode]\nDescription=PostgreSQL ODBC driver (Unicode version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1' \u003e /etc/odbcinst.ini\n\nrm /etc/odbc.ini\necho '[ODBC Data Sources]\nerlang-db-data-source=\"Postgresql database for my Erlang App\"\n\n[erlang-db-data-source]\nDriver=PostgreSQL Unicode\nDescription=PostgreSQL Data Source\nServername=localhost\nPort=5432\nUserName=postgres\nPassword=postgres\nDatabase=erlang' \u003e /etc/odbc.ini\n# TODO: Do not hardcode DB user and password above (why do they live in that file anyway?)\n\n#  Go to project root\ncd erlangseatsserver\n\n#  Start PostgreSQL via Docker.\necho 'Starting Postgres via Docker Compose...'\ndocker-compose -f docker-compose.yml up -d\n\n#  Do DB migrations.\necho 'Do DB migrations'\nsleep 5 \u0026\u0026 cat ./apps/venues_configurator/src/services/database_services/migrations.sql \\\n  | docker exec -i $(docker ps | grep postgres | awk '{print $1;}') psql -U postgres -d erlang\n# TODO: Do not hardcode DB user and password\n# TODO: Do not hardcode migrations file location\n\n#  Build \u0026 Start as daemon.\necho 'Starting app...'\n/Workspace/rebar3 release\n_build/default/rel/venues_configurator/bin/venues_configurator daemon\n\n# TODO: route stdout to some file.\n#_build/default/rel/venues_configurator/bin/venues_configurator daemon_attach | tee /var/log/web.stdout.log \u003e/dev/null",
                "content_type": "text/x-shellscript",
                "filename": "install-erlang-server.sh",
                "merge_type": ""
              }
            ],
            "rendered": "H4sIAAAAAAAA/6xYe3PbOA7/XzP9Dri0s0kmS6l5OYl3vDeO7SZp3bycR9NeJ0OJsMyaIlWS8iPX289+Q0p+ZJPc7e5d/okEggTwA/Aj5JaSFqUlV9Mc65AVwvKcahtlfILsF4hVIRnV08bKx5OPncOz69N28/JuJXBv5Aa14UrWYTN8+yp4FRCyrPQqmJ3d5iZXhluvS62lySBDaX+BPhcoaYaNFcoYMWYQTmkmVhY7rzSVpo+adGSiGJdpHfZibpcUvNsWJzZKhCoYSZTs8/RV8JFn+MTB18s6wWtoMgapVkVuwCqwAwQzNRazcsl4SREX0halGoy5HUCGWYzawKpWyq4ClQxWzdSsBq/9s9uEWW6n1Z4BNQOeKJ2HQWmrHgCQ6tw6fHGn/Gym5qsXz7WDyr/COFuP3Avh2gupRqCMIQPat6hnoczFYeA3l/YY9mkhrH92mNeB5mg1N0oHAAApJsrUock0pxLOl5fMAIWoQxRzGcXUDLww1zyjenrvjdaX/PY7Cqbq0Ox2G2vNbncdTs/Om73ebbve7HZLayUSZXQ/A2UZl35BqGR4n1NjxqwOfSoMlgeawT0t7EBp/oDsfohTH5b7I26RaEOh2Ww2D7dPH2hrc5psddxru3nRPHTi5kXrW637cLlbXI7aD/zzePT50hy+PxpfH8aMmeFk90TnedSJ00/Hmb7Z6vQPDy46umMOEjM+jG/l59p1e3isx/m+nNhT/u5y/+is2U4/Td/3RPqejkaf+ntm52ajty9uJ62tk7OPYtJr5yd759/2ard0q3azozfk9ue+2LuOd09V0v68e9X9cLVx8OmDou07XcvONr5HfHL5PhHf309aNxc3+cbR1vvtVrvZOebHd/3rzn42SWr7Gx+Mal5Fu/Hl6dFHFvGbY8S7Jna6bVuM9uVkY//urHt61bzYHV8ke1vjgjcP4lrr8lZlEX3YGd29PRh0Dy7SzsFgsN05um1/m+Lt/kXt2Azjz/0P1/TiSpgreRt9sqdslG8fvXu46tfuij1xg5tTecuvt246rU8Hmz1zHAQ5TYY0RVMPXrtkpEpQmZJU/W+EwKWxVAiC2h9nUI9Qh2bwF8lhQnwRm0Tz3L7EDn9bVPhrgIG1ualHUawpI4ZnSnIZZsh4kYWJyiKBVEsuUzJQY2IVwQkmhUVCiTuBlKZIX6uMWNSa9pXOSF9pQseGxHt93N3cjms7b2tBgMlAweq5xpxqLlMYKz00OU0wDMPVIBsyruF2JoOffoKELd4DnORKWzg++9hpRI5NHHWcF0IY0OhxVnpaUdcUOh5QqACdmS6EcIadvrf5Gq7O2md1aCuQysKAapYohl4Bri+7QcotJEJJnOOUcjsoYg/NnFk2ozJ/Bqk1lcmU24DmlqRogUyhyBm1uHC58i/mkmqOxlNqVQwmfNGvapfz7HFE1cLSKVymPsSk0GLu/KyIw1m9KVG48jQ+nlIYMYw5lVGulIjQzGrzfms73A53wl2y+VtJ6r/1VULFPc1YbSdkGMOvUKpWHqAOWD5MgXCI5mmMfq8yw6iSOKxIP9DZf9rj6vYdn6ABozKEjBvjQJhF9zNo/F5wjQziKSxCmJXBOz5x6rFWQ5TzXR6tKRr4ATS3QEifT0ilU5n2hk8qR9sqGaKGjnMMq5NP5tg/XvZnPxNpQkmC2vI+T6hFAz5ZqSzyFISJiUaB1GCZQ9I3ve48k0yNpVCUhczbKVuVy2ISlcmJ0jyFH/6GAvdICEOqM6WBKIgKoyMzoBqjIU5dL5qoPIdQnQz4CEklD9M8LWNbcRn+4pYbb9bKvJJcc2nLLRYTW2hcB8NTiYzE08afs/L1D4cGb9aEie8rcIAkZh2MpbHAlVnEFhEitElEcxsZVegETSi4sSGrXPBv8CtEDEeRLIR4plmfSVjlf4KLJ5IIDomSlnKJmoVcPVcmLZXlyrxcJ9X6omVJF1ae4ZzSbJSU6lEFgpmDFm2GWwfh1gzoSo+8WSvchQPErC+es/WVeTUI18v+Yni8M0gGmWKwMfkvasshn7UPW9DWfIT6abxLiy91hWJxQnJlbKrRfBfPqRSST7waw9Ej25cYU7391Gwp9xbH7qwZtGY7pBl9UJKOSxLUXrH65y+hGQCl6Dlv4oILRtAYlJZTEQRL3FUdVJXUcwuppuy5lUQglT64lp/kC40legatdd0Ea32loX3oqk9i4oh8fcZxsy1zyN3MUXKc41bXGw4/F0TIJQ/mV86tKgSDXKuYxmIKMUKM1o3dVoGxSqOb0A0Cl+6adRdlZfHLeZmx3kUXmqe9k69BG8vpgCvZWFr07jBfAbDmNGFUjijrQVkXJXMIHkeT/dp9bYf47iepLLzPUW6+C/dAQ6OCHtoibwgeO4lb6TlpG+MibbwNWirLuiptbAbXhqbYUoW0jc0gWHb2WnJ3uf4xfyvlv+ry+K+6vOq46mnWlnPpJVUuyi6jlkKvZL+vQXXls5gwaikpWbGxcj7vM3Dy2FGqK6vFDNXM85Ug+PLs/q+z+J/i+RKcS14FPT8r+VHYM8tAGRucK20buzvbW4H7/jt1izMyCM7dJ5PSbCFpV043Sv8e4eQReWmWah/6zzI/M+XVsUBjNUJYGw8c1btKn4LgI1/tdkCt7yKgcjqm07+v+948Uq4zcq2+YWLBz6UJgyfzoNftWaotLGEx4rS6AGZ961Vc087ysqTz6JJ4zL9A+vBYEk4zAUUOhHnTbeUCzniqaTnwVfZ+L18NjEDMYddTH7UQRjTPTTRCWaC5TypaoVbpyOgkctHxxF1AVR7u55IlY666/hEA/KicBPcV4QbDN2uVIHdzV6oxh1lm3Rw2HsLqP/2UAW82f/nX6jq4dgFyvdAiM7D/VKJfVF44XebalaV79SAeOp6Hn6o8UgOMYqbkk9zRPPc5esrps4nu3l8ZUfVrhbvGn0XYXbTPyCu7C9LWqrAIxjJVWE/Ubix2/ofB6/+Lqfvy8xV+lKPViLpRII3GGIel1VCoFH6dT1O//ygm5FXw7wAAAP//9ClYJIQTAAA="
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "add_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "3a8f167a46f43606009978d0d7474abe1e2374dd294307cc272ebc89cdd539ad",
            "rendered": "#cloud-config\n# Add groups to the system\n# Adds the ubuntu group with members 'root' and 'sys'\n# and the empty group hashicorp.\ngroups:\n  - ubuntu: [root,sys]\n  - hashicorp\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: apetrisor\n    gecos: Adrian Petrisor\n    shell: /bin/bash\n    primary_group: hashicorp\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    lock_passwd: false\n    ssh_authorized_keys:\n      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj6LzR5uRvDziZwvZRsBJGwUBbddskx5Irpp/EbgXHmrV2EfB9QErEs9cswBbWnZ6UDkHrwp8nxtNiFR8GOADgXyJSlgJavvXf7s4V+S8lWxC2IOMlxSDpI7Pj76Wa26V4r+n3Zfl7Ub5NocDZ5TLKT+9XKoaDYr6mO+q/ixRJclqJxCVQVp+G2J3CDAEHiHYfUE8mxc68+KsoAT/5bRNGMd/iVHeeYAeELDtuv8nx+8YOLNTAQ5wQc72wuiA9b6CRWom/az4vY09hL9QgE9hh3EGWDjyeW8Q6HskbZfKUaQTlsTnW/XtNdvp3GFzTf6Yu7lVe1ynWiU2VECX91SsH\n\npackages:\n#  - golang-go\n",
            "template": "#cloud-config\n# Add groups to the system\n# Adds the ubuntu group with members 'root' and 'sys'\n# and the empty group hashicorp.\ngroups:\n  - ubuntu: [root,sys]\n  - hashicorp\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: apetrisor\n    gecos: Adrian Petrisor\n    shell: /bin/bash\n    primary_group: hashicorp\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    lock_passwd: false\n    ssh_authorized_keys:\n      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj6LzR5uRvDziZwvZRsBJGwUBbddskx5Irpp/EbgXHmrV2EfB9QErEs9cswBbWnZ6UDkHrwp8nxtNiFR8GOADgXyJSlgJavvXf7s4V+S8lWxC2IOMlxSDpI7Pj76Wa26V4r+n3Zfl7Ub5NocDZ5TLKT+9XKoaDYr6mO+q/ixRJclqJxCVQVp+G2J3CDAEHiHYfUE8mxc68+KsoAT/5bRNGMd/iVHeeYAeELDtuv8nx+8YOLNTAQ5wQc72wuiA9b6CRWom/az4vY09hL9QgE9hh3EGWDjyeW8Q6HskbZfKUaQTlsTnW/XtNdvp3GFzTf6Yu7lVe1ynWiU2VECX91SsH\n\npackages:\n#  - golang-go\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "install_erlang_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "a8c4b58c03ed78b86b0f5b008eca9eda7056144de91914708ba45e9bdfc614a9",
            "rendered": "#!/bin/bash\n#  https://brad-simonin.medium.com/learning-how-to-execute-a-bash-script-from-terraform-for-aws-b7fe513b6406\n\necho 'Preparing workspace...'\nmkdir Workspace \u0026\u0026 cd Workspace\nexport HOME=/root\n\n# Pulls repository with my Erlang server.\necho 'Pulling repo...'\n# TODO: Do not hardcode repo URL\ngit clone https://github.com/apetrisor1/erlangseatsserver.git\napt-get -y update\n\n# Pulls Erlang binaries and installs.\n# TODO: Do not hardcode Erlang URL\necho 'Pulling Erlang and installing...'\ncurl https://packages.erlang-solutions.com/erlang/debian/pool/esl-erlang_23.3.4.5-1~ubuntu~focal_amd64.deb \u003e erlanginstaller\ndpkg -i /Workspace/erlanginstaller\napt-get install -y -f\nrm /Workspace/erlanginstaller\n\n#  Fixes some missing packages, required by esl-erlang.\necho 'Fixing broken packages...'\nyes | apt --fix-broken install\n\n#  Install Docker Engine\necho 'Installing Docker Engine...'\napt-get install -y ca-certificates curl gnupg lsb-release\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\napt-get -y update\napt-get install -y docker-ce docker-ce-cli containerd.io\n\n#  Install Docker Compose\necho 'Installing Docker Compose...'\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\n#  Install ODBC Driver\necho 'Installing ODBC Driver...'\napt-get install -y odbc-postgresql\napt-get install -y unixodbc-dev\n\n#  Install Rebar3\necho 'Installing Rebar3...'\nwget https://s3.amazonaws.com/rebar3/rebar3 \u0026\u0026 chmod +x rebar3\napt-get install -y build-essential\n\n/Workspace/rebar3 update\n/Workspace/rebar3 upgrade\n/Workspace/rebar3 clean\n\n#  Configure ODBC settings (for DB connection).\necho 'Configuring ODBC files...'\nrm /etc/odbcinst.ini\n\n# TODO: Would probably be better to store these in my repo\necho '[PostgreSQL ANSI]\nDescription=PostgreSQL ODBC driver (ANSI version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n\n[PostgreSQL Unicode]\nDescription=PostgreSQL ODBC driver (Unicode version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1' \u003e /etc/odbcinst.ini\n\nrm /etc/odbc.ini\necho '[ODBC Data Sources]\nerlang-db-data-source=\"Postgresql database for my Erlang App\"\n\n[erlang-db-data-source]\nDriver=PostgreSQL Unicode\nDescription=PostgreSQL Data Source\nServername=localhost\nPort=5432\nUserName=postgres\nPassword=postgres\nDatabase=erlang' \u003e /etc/odbc.ini\n# TODO: Do not hardcode DB user and password above (why do they live in that file anyway?)\n\n#  Go to project root\ncd erlangseatsserver\n\n#  Start PostgreSQL via Docker.\necho 'Starting Postgres via Docker Compose...'\ndocker-compose -f docker-compose.yml up -d\n\n#  Do DB migrations.\necho 'Do DB migrations'\nsleep 5 \u0026\u0026 cat ./apps/venues_configurator/src/services/database_services/migrations.sql \\\n  | docker exec -i $(docker ps | grep postgres | awk '{print $1;}') psql -U postgres -d erlang\n# TODO: Do not hardcode DB user and password\n# TODO: Do not hardcode migrations file location\n\n#  Build \u0026 Start as daemon.\necho 'Starting app...'\n/Workspace/rebar3 release\n_build/default/rel/venues_configurator/bin/venues_configurator daemon\n\n# TODO: route stdout to some file.\n#_build/default/rel/venues_configurator/bin/venues_configurator daemon_attach | tee /var/log/web.stdout.log \u003e/dev/null",
            "template": "#!/bin/bash\n#  https://brad-simonin.medium.com/learning-how-to-execute-a-bash-script-from-terraform-for-aws-b7fe513b6406\n\necho 'Preparing workspace...'\nmkdir Workspace \u0026\u0026 cd Workspace\nexport HOME=/root\n\n# Pulls repository with my Erlang server.\necho 'Pulling repo...'\n# TODO: Do not hardcode repo URL\ngit clone https://github.com/apetrisor1/erlangseatsserver.git\napt-get -y update\n\n# Pulls Erlang binaries and installs.\n# TODO: Do not hardcode Erlang URL\necho 'Pulling Erlang and installing...'\ncurl https://packages.erlang-solutions.com/erlang/debian/pool/esl-erlang_23.3.4.5-1~ubuntu~focal_amd64.deb \u003e erlanginstaller\ndpkg -i /Workspace/erlanginstaller\napt-get install -y -f\nrm /Workspace/erlanginstaller\n\n#  Fixes some missing packages, required by esl-erlang.\necho 'Fixing broken packages...'\nyes | apt --fix-broken install\n\n#  Install Docker Engine\necho 'Installing Docker Engine...'\napt-get install -y ca-certificates curl gnupg lsb-release\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\napt-get -y update\napt-get install -y docker-ce docker-ce-cli containerd.io\n\n#  Install Docker Compose\necho 'Installing Docker Compose...'\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\n#  Install ODBC Driver\necho 'Installing ODBC Driver...'\napt-get install -y odbc-postgresql\napt-get install -y unixodbc-dev\n\n#  Install Rebar3\necho 'Installing Rebar3...'\nwget https://s3.amazonaws.com/rebar3/rebar3 \u0026\u0026 chmod +x rebar3\napt-get install -y build-essential\n\n/Workspace/rebar3 update\n/Workspace/rebar3 upgrade\n/Workspace/rebar3 clean\n\n#  Configure ODBC settings (for DB connection).\necho 'Configuring ODBC files...'\nrm /etc/odbcinst.ini\n\n# TODO: Would probably be better to store these in my repo\necho '[PostgreSQL ANSI]\nDescription=PostgreSQL ODBC driver (ANSI version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n\n[PostgreSQL Unicode]\nDescription=PostgreSQL ODBC driver (Unicode version)\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1' \u003e /etc/odbcinst.ini\n\nrm /etc/odbc.ini\necho '[ODBC Data Sources]\nerlang-db-data-source=\"Postgresql database for my Erlang App\"\n\n[erlang-db-data-source]\nDriver=PostgreSQL Unicode\nDescription=PostgreSQL Data Source\nServername=localhost\nPort=5432\nUserName=postgres\nPassword=postgres\nDatabase=erlang' \u003e /etc/odbc.ini\n# TODO: Do not hardcode DB user and password above (why do they live in that file anyway?)\n\n#  Go to project root\ncd erlangseatsserver\n\n#  Start PostgreSQL via Docker.\necho 'Starting Postgres via Docker Compose...'\ndocker-compose -f docker-compose.yml up -d\n\n#  Do DB migrations.\necho 'Do DB migrations'\nsleep 5 \u0026\u0026 cat ./apps/venues_configurator/src/services/database_services/migrations.sql \\\n  | docker exec -i $(docker ps | grep postgres | awk '{print $1;}') psql -U postgres -d erlang\n# TODO: Do not hardcode DB user and password\n# TODO: Do not hardcode migrations file location\n\n#  Build \u0026 Start as daemon.\necho 'Starting app...'\n/Workspace/rebar3 release\n_build/default/rel/venues_configurator/bin/venues_configurator daemon\n\n# TODO: route stdout to some file.\n#_build/default/rel/venues_configurator/bin/venues_configurator daemon_attach | tee /var/log/web.stdout.log \u003e/dev/null",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "web",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0a49b025fffbbdac6",
            "arn": "arn:aws:ec2:eu-central-1:049353925464:instance/i-0647fe45040938097",
            "associate_public_ip_address": true,
            "availability_zone": "eu-central-1b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0647fe45040938097",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0c07d2044df529bd3",
            "private_dns": "ip-10-1-0-52.eu-central-1.compute.internal",
            "private_ip": "10.1.0.52",
            "public_dns": "ec2-3-68-192-198.eu-central-1.compute.amazonaws.com",
            "public_ip": "3.68.192.198",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0b7a13837b06f37be",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0c06c2e707779adb4",
            "tags": {
              "Name": "ErlangVenuesConfigurator"
            },
            "tags_all": {
              "Name": "ErlangVenuesConfigurator"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": "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",
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0888cfbdcd0ff0071"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_security_group.sg_22_80",
            "aws_subnet.subnet_public",
            "aws_vpc.vpc",
            "data.aws_ami.ubuntu",
            "data.template_cloudinit_config.config"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "igw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-central-1:049353925464:internet-gateway/igw-0c9ba210888e90d30",
            "id": "igw-0c9ba210888e90d30",
            "owner_id": "049353925464",
            "tags": null,
            "tags_all": {},
            "vpc_id": "vpc-0bef41abf2bf7c030"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "rtb_public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-central-1:049353925464:route-table/rtb-0c7d4d3810f4c1b62",
            "id": "rtb-0c7d4d3810f4c1b62",
            "owner_id": "049353925464",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-0c9ba210888e90d30",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0bef41abf2bf7c030"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "rta_subnet_public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-01a242ee4590bf0d8",
            "route_table_id": "rtb-0c7d4d3810f4c1b62",
            "subnet_id": "subnet-0c06c2e707779adb4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_route_table.rtb_public",
            "aws_subnet.subnet_public",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "sg_22_80",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-central-1:049353925464:security-group/sg-0888cfbdcd0ff0071",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0888cfbdcd0ff0071",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8080,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8080
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "sg_22",
            "name_prefix": "",
            "owner_id": "049353925464",
            "revoke_rules_on_delete": false,
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0bef41abf2bf7c030"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "subnet_public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-central-1:049353925464:subnet/subnet-0c06c2e707779adb4",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "eu-central-1b",
            "availability_zone_id": "euc1-az3",
            "cidr_block": "10.1.0.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-0c06c2e707779adb4",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "049353925464",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0bef41abf2bf7c030"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-central-1:049353925464:vpc/vpc-0bef41abf2bf7c030",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.1.0.0/16",
            "default_network_acl_id": "acl-01e9d18829636fa51",
            "default_route_table_id": "rtb-02ec45e8e1c7956a0",
            "default_security_group_id": "sg-0eedf2a1f2fbe31d1",
            "dhcp_options_id": "dopt-d9b517b3",
            "enable_classiclink": null,
            "enable_classiclink_dns_support": null,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "id": "vpc-0bef41abf2bf7c030",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "main_route_table_id": "rtb-02ec45e8e1c7956a0",
            "owner_id": "049353925464",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}
